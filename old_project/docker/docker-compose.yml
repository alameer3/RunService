version: '3.8'

services:
  # Redis for caching and message queuing
  redis:
    image: redis:7.2-alpine
    container_name: vnc_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-vnc123456}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vnc_network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: vnc_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vncdesktop}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-vnc123456}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vnc_network

  # Main VNC Desktop Server
  vnc-server:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: vnc_server
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-vnc123456}@postgres:5432/${POSTGRES_DB:-vncdesktop}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-vnc123456}@redis:6379/0
      
      # Flask
      FLASK_ENV: production
      SESSION_SECRET: ${SESSION_SECRET:-your-super-secret-key-change-in-production}
      
      # VNC
      VNC_PASSWORD: ${VNC_PASSWORD:-vnc123456}
      DISPLAY: :1
      
      # Performance
      WORKERS: ${WORKERS:-2}
      WORKER_CONNECTIONS: ${WORKER_CONNECTIONS:-1000}
      
    volumes:
      - vnc_data:/app/data
    ports:
      - "5000:5000"  # Web interface
      - "5900:5900"  # VNC server
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - vnc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    container_name: vnc_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - vnc-server
    networks:
      - vnc_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background worker for tasks
  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: vnc_worker
    restart: unless-stopped
    command: celery
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-vnc123456}@postgres:5432/${POSTGRES_DB:-vncdesktop}
      REDIS_URL: redis://:${REDIS_PASSWORD:-vnc123456}@redis:6379/0
      SESSION_SECRET: ${SESSION_SECRET:-your-super-secret-key-change-in-production}
    depends_on:
      - redis
      - postgres
    networks:
      - vnc_network

  # Monitoring with Grafana (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: vnc_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - vnc_network
    profiles:
      - monitoring

networks:
  vnc_network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  vnc_data:
    driver: local
  grafana_data:
    driver: local